Situation 2: Connect to one of the following Database to demonstrate data storage.

Assuming MySQL was deployed, RESTful API was implemented using C#.

In file appsettings.json, add:

{
  "ConnectionStrings": {
    "DefaultConnection": "server=localhost;port=3306;database=_db_name;user=_db_user;password=_db_user_password"
  }
}

DefaultConnection is the name for the connection strings. It will be used in Startup.cs
localhost is the "endpoint" of database server.
port is the MySQL Service port.
_db_name is the credential for database.
_db_user_password is the passowrd for database.

In file Startup.cs, add:

services.AddDbContext<AppDbContext>(options =>
  options.UseMySql(Configuration.GetConnectionString("DefaultConnection"), 
  new MySqlServerVersion(new Version(_major_version, _minor_version, _patch_version))));

DefaultConnection is the name defined in appsettings.json
_major_version, _minor_version, _patch_version is which version application target to the service.

In file /UserController.cs, add:

public class User
{
    [Key]
    public int Id { get; set; }
    public string Username { get; set; }
    public string Email { get; set; }
    public string PhoneNumber { get; set; }
    public List<string> Skillsets { get; set; } = new List<string>();
    public string Hobby { get; set; }
}
[ApiController]
[Route("[controller]")]
public class UserController : ControllerBase {
  
  [HttpPost("Register")]
  public async Task<ActionResult<User>> CreateUser(User user) {
    _context.Users.Add(user);
    await _context.SaveChangesAsync();
    return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
  }

  [HttpGet("getAllUsers")]
  public async Task<ActionResult<IEnumerable<User>>> GetUsers()
  {
    return await _context.Users.ToListAsync();
  }

  [HttpGet("{id}")]
  public async Task<ActionResult<User>> GetUser(int id)
  {
    var user = await _context.Users.FindAsync(id);
    if (user == null) return NotFound();
    return user;
  }

  [HttpPut("{id}")]
  public async Task<IActionResult> UpdateUser(int id, User user)
  {
    if (id != user.Id) return BadRequest();
    _context.Entry(user).State = EntityState.Modified;
    try
    {
      await _context.SaveChangesAsync();
    }
    catch (DbUpdateConcurrencyException)
    {
      if (!_context.Users.Any(e => e.Id == id)) return NotFound();
      else throw;
    }
    return NoContent();
  }

  [HttpDelete("{id}")]
  public async Task<IActionResult> DeleteUser(int id)
  {
    var user = await _context.Users.FindAsync(id);
    if (user == null) return NotFound();
    _context.Users.Remove(user);
    await _context.SaveChangesAsync();
    return NoContent();
  }
}